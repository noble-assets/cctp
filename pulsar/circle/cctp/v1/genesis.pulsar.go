// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package cctpv1

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_GenesisState_6_list)(nil)

type _GenesisState_6_list struct {
	list *[]*Attester
}

func (x *_GenesisState_6_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_6_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_6_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Attester)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_6_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Attester)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_6_list) AppendMutable() protoreflect.Value {
	v := new(Attester)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_6_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_6_list) NewElement() protoreflect.Value {
	v := new(Attester)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_6_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_7_list)(nil)

type _GenesisState_7_list struct {
	list *[]*PerMessageBurnLimit
}

func (x *_GenesisState_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*PerMessageBurnLimit)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*PerMessageBurnLimit)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_7_list) AppendMutable() protoreflect.Value {
	v := new(PerMessageBurnLimit)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_7_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_7_list) NewElement() protoreflect.Value {
	v := new(PerMessageBurnLimit)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_7_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_13_list)(nil)

type _GenesisState_13_list struct {
	list *[]*TokenPair
}

func (x *_GenesisState_13_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_13_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_13_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TokenPair)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_13_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TokenPair)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_13_list) AppendMutable() protoreflect.Value {
	v := new(TokenPair)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_13_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_13_list) NewElement() protoreflect.Value {
	v := new(TokenPair)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_13_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_14_list)(nil)

type _GenesisState_14_list struct {
	list *[]*Nonce
}

func (x *_GenesisState_14_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_14_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_14_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Nonce)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_14_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Nonce)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_14_list) AppendMutable() protoreflect.Value {
	v := new(Nonce)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_14_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_14_list) NewElement() protoreflect.Value {
	v := new(Nonce)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_14_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_15_list)(nil)

type _GenesisState_15_list struct {
	list *[]*RemoteTokenMessenger
}

func (x *_GenesisState_15_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_15_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_15_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*RemoteTokenMessenger)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_15_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*RemoteTokenMessenger)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_15_list) AppendMutable() protoreflect.Value {
	v := new(RemoteTokenMessenger)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_15_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_15_list) NewElement() protoreflect.Value {
	v := new(RemoteTokenMessenger)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_15_list) IsValid() bool {
	return x.list != nil
}

var (
	md_GenesisState                                       protoreflect.MessageDescriptor
	fd_GenesisState_owner                                 protoreflect.FieldDescriptor
	fd_GenesisState_attester_manager                      protoreflect.FieldDescriptor
	fd_GenesisState_pauser                                protoreflect.FieldDescriptor
	fd_GenesisState_token_controller                      protoreflect.FieldDescriptor
	fd_GenesisState_attester_list                         protoreflect.FieldDescriptor
	fd_GenesisState_per_message_burn_limit_list           protoreflect.FieldDescriptor
	fd_GenesisState_burning_and_minting_paused            protoreflect.FieldDescriptor
	fd_GenesisState_sending_and_receiving_messages_paused protoreflect.FieldDescriptor
	fd_GenesisState_max_message_body_size                 protoreflect.FieldDescriptor
	fd_GenesisState_next_available_nonce                  protoreflect.FieldDescriptor
	fd_GenesisState_signature_threshold                   protoreflect.FieldDescriptor
	fd_GenesisState_token_pair_list                       protoreflect.FieldDescriptor
	fd_GenesisState_used_nonces_list                      protoreflect.FieldDescriptor
	fd_GenesisState_token_messenger_list                  protoreflect.FieldDescriptor
)

func init() {
	file_circle_cctp_v1_genesis_proto_init()
	md_GenesisState = File_circle_cctp_v1_genesis_proto.Messages().ByName("GenesisState")
	fd_GenesisState_owner = md_GenesisState.Fields().ByName("owner")
	fd_GenesisState_attester_manager = md_GenesisState.Fields().ByName("attester_manager")
	fd_GenesisState_pauser = md_GenesisState.Fields().ByName("pauser")
	fd_GenesisState_token_controller = md_GenesisState.Fields().ByName("token_controller")
	fd_GenesisState_attester_list = md_GenesisState.Fields().ByName("attester_list")
	fd_GenesisState_per_message_burn_limit_list = md_GenesisState.Fields().ByName("per_message_burn_limit_list")
	fd_GenesisState_burning_and_minting_paused = md_GenesisState.Fields().ByName("burning_and_minting_paused")
	fd_GenesisState_sending_and_receiving_messages_paused = md_GenesisState.Fields().ByName("sending_and_receiving_messages_paused")
	fd_GenesisState_max_message_body_size = md_GenesisState.Fields().ByName("max_message_body_size")
	fd_GenesisState_next_available_nonce = md_GenesisState.Fields().ByName("next_available_nonce")
	fd_GenesisState_signature_threshold = md_GenesisState.Fields().ByName("signature_threshold")
	fd_GenesisState_token_pair_list = md_GenesisState.Fields().ByName("token_pair_list")
	fd_GenesisState_used_nonces_list = md_GenesisState.Fields().ByName("used_nonces_list")
	fd_GenesisState_token_messenger_list = md_GenesisState.Fields().ByName("token_messenger_list")
}

var _ protoreflect.Message = (*fastReflection_GenesisState)(nil)

type fastReflection_GenesisState GenesisState

func (x *GenesisState) ProtoReflect() protoreflect.Message {
	return (*fastReflection_GenesisState)(x)
}

func (x *GenesisState) slowProtoReflect() protoreflect.Message {
	mi := &file_circle_cctp_v1_genesis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_GenesisState_messageType fastReflection_GenesisState_messageType
var _ protoreflect.MessageType = fastReflection_GenesisState_messageType{}

type fastReflection_GenesisState_messageType struct{}

func (x fastReflection_GenesisState_messageType) Zero() protoreflect.Message {
	return (*fastReflection_GenesisState)(nil)
}
func (x fastReflection_GenesisState_messageType) New() protoreflect.Message {
	return new(fastReflection_GenesisState)
}
func (x fastReflection_GenesisState_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisState
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_GenesisState) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisState
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_GenesisState) Type() protoreflect.MessageType {
	return _fastReflection_GenesisState_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_GenesisState) New() protoreflect.Message {
	return new(fastReflection_GenesisState)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_GenesisState) Interface() protoreflect.ProtoMessage {
	return (*GenesisState)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_GenesisState) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Owner != "" {
		value := protoreflect.ValueOfString(x.Owner)
		if !f(fd_GenesisState_owner, value) {
			return
		}
	}
	if x.AttesterManager != "" {
		value := protoreflect.ValueOfString(x.AttesterManager)
		if !f(fd_GenesisState_attester_manager, value) {
			return
		}
	}
	if x.Pauser != "" {
		value := protoreflect.ValueOfString(x.Pauser)
		if !f(fd_GenesisState_pauser, value) {
			return
		}
	}
	if x.TokenController != "" {
		value := protoreflect.ValueOfString(x.TokenController)
		if !f(fd_GenesisState_token_controller, value) {
			return
		}
	}
	if len(x.AttesterList) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_6_list{list: &x.AttesterList})
		if !f(fd_GenesisState_attester_list, value) {
			return
		}
	}
	if len(x.PerMessageBurnLimitList) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_7_list{list: &x.PerMessageBurnLimitList})
		if !f(fd_GenesisState_per_message_burn_limit_list, value) {
			return
		}
	}
	if x.BurningAndMintingPaused != nil {
		value := protoreflect.ValueOfMessage(x.BurningAndMintingPaused.ProtoReflect())
		if !f(fd_GenesisState_burning_and_minting_paused, value) {
			return
		}
	}
	if x.SendingAndReceivingMessagesPaused != nil {
		value := protoreflect.ValueOfMessage(x.SendingAndReceivingMessagesPaused.ProtoReflect())
		if !f(fd_GenesisState_sending_and_receiving_messages_paused, value) {
			return
		}
	}
	if x.MaxMessageBodySize != nil {
		value := protoreflect.ValueOfMessage(x.MaxMessageBodySize.ProtoReflect())
		if !f(fd_GenesisState_max_message_body_size, value) {
			return
		}
	}
	if x.NextAvailableNonce != nil {
		value := protoreflect.ValueOfMessage(x.NextAvailableNonce.ProtoReflect())
		if !f(fd_GenesisState_next_available_nonce, value) {
			return
		}
	}
	if x.SignatureThreshold != nil {
		value := protoreflect.ValueOfMessage(x.SignatureThreshold.ProtoReflect())
		if !f(fd_GenesisState_signature_threshold, value) {
			return
		}
	}
	if len(x.TokenPairList) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_13_list{list: &x.TokenPairList})
		if !f(fd_GenesisState_token_pair_list, value) {
			return
		}
	}
	if len(x.UsedNoncesList) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_14_list{list: &x.UsedNoncesList})
		if !f(fd_GenesisState_used_nonces_list, value) {
			return
		}
	}
	if len(x.TokenMessengerList) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_15_list{list: &x.TokenMessengerList})
		if !f(fd_GenesisState_token_messenger_list, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_GenesisState) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "circle.cctp.v1.GenesisState.owner":
		return x.Owner != ""
	case "circle.cctp.v1.GenesisState.attester_manager":
		return x.AttesterManager != ""
	case "circle.cctp.v1.GenesisState.pauser":
		return x.Pauser != ""
	case "circle.cctp.v1.GenesisState.token_controller":
		return x.TokenController != ""
	case "circle.cctp.v1.GenesisState.attester_list":
		return len(x.AttesterList) != 0
	case "circle.cctp.v1.GenesisState.per_message_burn_limit_list":
		return len(x.PerMessageBurnLimitList) != 0
	case "circle.cctp.v1.GenesisState.burning_and_minting_paused":
		return x.BurningAndMintingPaused != nil
	case "circle.cctp.v1.GenesisState.sending_and_receiving_messages_paused":
		return x.SendingAndReceivingMessagesPaused != nil
	case "circle.cctp.v1.GenesisState.max_message_body_size":
		return x.MaxMessageBodySize != nil
	case "circle.cctp.v1.GenesisState.next_available_nonce":
		return x.NextAvailableNonce != nil
	case "circle.cctp.v1.GenesisState.signature_threshold":
		return x.SignatureThreshold != nil
	case "circle.cctp.v1.GenesisState.token_pair_list":
		return len(x.TokenPairList) != 0
	case "circle.cctp.v1.GenesisState.used_nonces_list":
		return len(x.UsedNoncesList) != 0
	case "circle.cctp.v1.GenesisState.token_messenger_list":
		return len(x.TokenMessengerList) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: circle.cctp.v1.GenesisState"))
		}
		panic(fmt.Errorf("message circle.cctp.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "circle.cctp.v1.GenesisState.owner":
		x.Owner = ""
	case "circle.cctp.v1.GenesisState.attester_manager":
		x.AttesterManager = ""
	case "circle.cctp.v1.GenesisState.pauser":
		x.Pauser = ""
	case "circle.cctp.v1.GenesisState.token_controller":
		x.TokenController = ""
	case "circle.cctp.v1.GenesisState.attester_list":
		x.AttesterList = nil
	case "circle.cctp.v1.GenesisState.per_message_burn_limit_list":
		x.PerMessageBurnLimitList = nil
	case "circle.cctp.v1.GenesisState.burning_and_minting_paused":
		x.BurningAndMintingPaused = nil
	case "circle.cctp.v1.GenesisState.sending_and_receiving_messages_paused":
		x.SendingAndReceivingMessagesPaused = nil
	case "circle.cctp.v1.GenesisState.max_message_body_size":
		x.MaxMessageBodySize = nil
	case "circle.cctp.v1.GenesisState.next_available_nonce":
		x.NextAvailableNonce = nil
	case "circle.cctp.v1.GenesisState.signature_threshold":
		x.SignatureThreshold = nil
	case "circle.cctp.v1.GenesisState.token_pair_list":
		x.TokenPairList = nil
	case "circle.cctp.v1.GenesisState.used_nonces_list":
		x.UsedNoncesList = nil
	case "circle.cctp.v1.GenesisState.token_messenger_list":
		x.TokenMessengerList = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: circle.cctp.v1.GenesisState"))
		}
		panic(fmt.Errorf("message circle.cctp.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_GenesisState) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "circle.cctp.v1.GenesisState.owner":
		value := x.Owner
		return protoreflect.ValueOfString(value)
	case "circle.cctp.v1.GenesisState.attester_manager":
		value := x.AttesterManager
		return protoreflect.ValueOfString(value)
	case "circle.cctp.v1.GenesisState.pauser":
		value := x.Pauser
		return protoreflect.ValueOfString(value)
	case "circle.cctp.v1.GenesisState.token_controller":
		value := x.TokenController
		return protoreflect.ValueOfString(value)
	case "circle.cctp.v1.GenesisState.attester_list":
		if len(x.AttesterList) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_6_list{})
		}
		listValue := &_GenesisState_6_list{list: &x.AttesterList}
		return protoreflect.ValueOfList(listValue)
	case "circle.cctp.v1.GenesisState.per_message_burn_limit_list":
		if len(x.PerMessageBurnLimitList) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_7_list{})
		}
		listValue := &_GenesisState_7_list{list: &x.PerMessageBurnLimitList}
		return protoreflect.ValueOfList(listValue)
	case "circle.cctp.v1.GenesisState.burning_and_minting_paused":
		value := x.BurningAndMintingPaused
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "circle.cctp.v1.GenesisState.sending_and_receiving_messages_paused":
		value := x.SendingAndReceivingMessagesPaused
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "circle.cctp.v1.GenesisState.max_message_body_size":
		value := x.MaxMessageBodySize
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "circle.cctp.v1.GenesisState.next_available_nonce":
		value := x.NextAvailableNonce
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "circle.cctp.v1.GenesisState.signature_threshold":
		value := x.SignatureThreshold
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "circle.cctp.v1.GenesisState.token_pair_list":
		if len(x.TokenPairList) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_13_list{})
		}
		listValue := &_GenesisState_13_list{list: &x.TokenPairList}
		return protoreflect.ValueOfList(listValue)
	case "circle.cctp.v1.GenesisState.used_nonces_list":
		if len(x.UsedNoncesList) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_14_list{})
		}
		listValue := &_GenesisState_14_list{list: &x.UsedNoncesList}
		return protoreflect.ValueOfList(listValue)
	case "circle.cctp.v1.GenesisState.token_messenger_list":
		if len(x.TokenMessengerList) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_15_list{})
		}
		listValue := &_GenesisState_15_list{list: &x.TokenMessengerList}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: circle.cctp.v1.GenesisState"))
		}
		panic(fmt.Errorf("message circle.cctp.v1.GenesisState does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "circle.cctp.v1.GenesisState.owner":
		x.Owner = value.Interface().(string)
	case "circle.cctp.v1.GenesisState.attester_manager":
		x.AttesterManager = value.Interface().(string)
	case "circle.cctp.v1.GenesisState.pauser":
		x.Pauser = value.Interface().(string)
	case "circle.cctp.v1.GenesisState.token_controller":
		x.TokenController = value.Interface().(string)
	case "circle.cctp.v1.GenesisState.attester_list":
		lv := value.List()
		clv := lv.(*_GenesisState_6_list)
		x.AttesterList = *clv.list
	case "circle.cctp.v1.GenesisState.per_message_burn_limit_list":
		lv := value.List()
		clv := lv.(*_GenesisState_7_list)
		x.PerMessageBurnLimitList = *clv.list
	case "circle.cctp.v1.GenesisState.burning_and_minting_paused":
		x.BurningAndMintingPaused = value.Message().Interface().(*BurningAndMintingPaused)
	case "circle.cctp.v1.GenesisState.sending_and_receiving_messages_paused":
		x.SendingAndReceivingMessagesPaused = value.Message().Interface().(*SendingAndReceivingMessagesPaused)
	case "circle.cctp.v1.GenesisState.max_message_body_size":
		x.MaxMessageBodySize = value.Message().Interface().(*MaxMessageBodySize)
	case "circle.cctp.v1.GenesisState.next_available_nonce":
		x.NextAvailableNonce = value.Message().Interface().(*Nonce)
	case "circle.cctp.v1.GenesisState.signature_threshold":
		x.SignatureThreshold = value.Message().Interface().(*SignatureThreshold)
	case "circle.cctp.v1.GenesisState.token_pair_list":
		lv := value.List()
		clv := lv.(*_GenesisState_13_list)
		x.TokenPairList = *clv.list
	case "circle.cctp.v1.GenesisState.used_nonces_list":
		lv := value.List()
		clv := lv.(*_GenesisState_14_list)
		x.UsedNoncesList = *clv.list
	case "circle.cctp.v1.GenesisState.token_messenger_list":
		lv := value.List()
		clv := lv.(*_GenesisState_15_list)
		x.TokenMessengerList = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: circle.cctp.v1.GenesisState"))
		}
		panic(fmt.Errorf("message circle.cctp.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "circle.cctp.v1.GenesisState.attester_list":
		if x.AttesterList == nil {
			x.AttesterList = []*Attester{}
		}
		value := &_GenesisState_6_list{list: &x.AttesterList}
		return protoreflect.ValueOfList(value)
	case "circle.cctp.v1.GenesisState.per_message_burn_limit_list":
		if x.PerMessageBurnLimitList == nil {
			x.PerMessageBurnLimitList = []*PerMessageBurnLimit{}
		}
		value := &_GenesisState_7_list{list: &x.PerMessageBurnLimitList}
		return protoreflect.ValueOfList(value)
	case "circle.cctp.v1.GenesisState.burning_and_minting_paused":
		if x.BurningAndMintingPaused == nil {
			x.BurningAndMintingPaused = new(BurningAndMintingPaused)
		}
		return protoreflect.ValueOfMessage(x.BurningAndMintingPaused.ProtoReflect())
	case "circle.cctp.v1.GenesisState.sending_and_receiving_messages_paused":
		if x.SendingAndReceivingMessagesPaused == nil {
			x.SendingAndReceivingMessagesPaused = new(SendingAndReceivingMessagesPaused)
		}
		return protoreflect.ValueOfMessage(x.SendingAndReceivingMessagesPaused.ProtoReflect())
	case "circle.cctp.v1.GenesisState.max_message_body_size":
		if x.MaxMessageBodySize == nil {
			x.MaxMessageBodySize = new(MaxMessageBodySize)
		}
		return protoreflect.ValueOfMessage(x.MaxMessageBodySize.ProtoReflect())
	case "circle.cctp.v1.GenesisState.next_available_nonce":
		if x.NextAvailableNonce == nil {
			x.NextAvailableNonce = new(Nonce)
		}
		return protoreflect.ValueOfMessage(x.NextAvailableNonce.ProtoReflect())
	case "circle.cctp.v1.GenesisState.signature_threshold":
		if x.SignatureThreshold == nil {
			x.SignatureThreshold = new(SignatureThreshold)
		}
		return protoreflect.ValueOfMessage(x.SignatureThreshold.ProtoReflect())
	case "circle.cctp.v1.GenesisState.token_pair_list":
		if x.TokenPairList == nil {
			x.TokenPairList = []*TokenPair{}
		}
		value := &_GenesisState_13_list{list: &x.TokenPairList}
		return protoreflect.ValueOfList(value)
	case "circle.cctp.v1.GenesisState.used_nonces_list":
		if x.UsedNoncesList == nil {
			x.UsedNoncesList = []*Nonce{}
		}
		value := &_GenesisState_14_list{list: &x.UsedNoncesList}
		return protoreflect.ValueOfList(value)
	case "circle.cctp.v1.GenesisState.token_messenger_list":
		if x.TokenMessengerList == nil {
			x.TokenMessengerList = []*RemoteTokenMessenger{}
		}
		value := &_GenesisState_15_list{list: &x.TokenMessengerList}
		return protoreflect.ValueOfList(value)
	case "circle.cctp.v1.GenesisState.owner":
		panic(fmt.Errorf("field owner of message circle.cctp.v1.GenesisState is not mutable"))
	case "circle.cctp.v1.GenesisState.attester_manager":
		panic(fmt.Errorf("field attester_manager of message circle.cctp.v1.GenesisState is not mutable"))
	case "circle.cctp.v1.GenesisState.pauser":
		panic(fmt.Errorf("field pauser of message circle.cctp.v1.GenesisState is not mutable"))
	case "circle.cctp.v1.GenesisState.token_controller":
		panic(fmt.Errorf("field token_controller of message circle.cctp.v1.GenesisState is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: circle.cctp.v1.GenesisState"))
		}
		panic(fmt.Errorf("message circle.cctp.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_GenesisState) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "circle.cctp.v1.GenesisState.owner":
		return protoreflect.ValueOfString("")
	case "circle.cctp.v1.GenesisState.attester_manager":
		return protoreflect.ValueOfString("")
	case "circle.cctp.v1.GenesisState.pauser":
		return protoreflect.ValueOfString("")
	case "circle.cctp.v1.GenesisState.token_controller":
		return protoreflect.ValueOfString("")
	case "circle.cctp.v1.GenesisState.attester_list":
		list := []*Attester{}
		return protoreflect.ValueOfList(&_GenesisState_6_list{list: &list})
	case "circle.cctp.v1.GenesisState.per_message_burn_limit_list":
		list := []*PerMessageBurnLimit{}
		return protoreflect.ValueOfList(&_GenesisState_7_list{list: &list})
	case "circle.cctp.v1.GenesisState.burning_and_minting_paused":
		m := new(BurningAndMintingPaused)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "circle.cctp.v1.GenesisState.sending_and_receiving_messages_paused":
		m := new(SendingAndReceivingMessagesPaused)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "circle.cctp.v1.GenesisState.max_message_body_size":
		m := new(MaxMessageBodySize)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "circle.cctp.v1.GenesisState.next_available_nonce":
		m := new(Nonce)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "circle.cctp.v1.GenesisState.signature_threshold":
		m := new(SignatureThreshold)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "circle.cctp.v1.GenesisState.token_pair_list":
		list := []*TokenPair{}
		return protoreflect.ValueOfList(&_GenesisState_13_list{list: &list})
	case "circle.cctp.v1.GenesisState.used_nonces_list":
		list := []*Nonce{}
		return protoreflect.ValueOfList(&_GenesisState_14_list{list: &list})
	case "circle.cctp.v1.GenesisState.token_messenger_list":
		list := []*RemoteTokenMessenger{}
		return protoreflect.ValueOfList(&_GenesisState_15_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: circle.cctp.v1.GenesisState"))
		}
		panic(fmt.Errorf("message circle.cctp.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_GenesisState) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in circle.cctp.v1.GenesisState", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_GenesisState) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_GenesisState) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_GenesisState) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Owner)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AttesterManager)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Pauser)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TokenController)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.AttesterList) > 0 {
			for _, e := range x.AttesterList {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.PerMessageBurnLimitList) > 0 {
			for _, e := range x.PerMessageBurnLimitList {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.BurningAndMintingPaused != nil {
			l = options.Size(x.BurningAndMintingPaused)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.SendingAndReceivingMessagesPaused != nil {
			l = options.Size(x.SendingAndReceivingMessagesPaused)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MaxMessageBodySize != nil {
			l = options.Size(x.MaxMessageBodySize)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.NextAvailableNonce != nil {
			l = options.Size(x.NextAvailableNonce)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.SignatureThreshold != nil {
			l = options.Size(x.SignatureThreshold)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.TokenPairList) > 0 {
			for _, e := range x.TokenPairList {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.UsedNoncesList) > 0 {
			for _, e := range x.UsedNoncesList {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.TokenMessengerList) > 0 {
			for _, e := range x.TokenMessengerList {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.TokenMessengerList) > 0 {
			for iNdEx := len(x.TokenMessengerList) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.TokenMessengerList[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x7a
			}
		}
		if len(x.UsedNoncesList) > 0 {
			for iNdEx := len(x.UsedNoncesList) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.UsedNoncesList[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x72
			}
		}
		if len(x.TokenPairList) > 0 {
			for iNdEx := len(x.TokenPairList) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.TokenPairList[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x6a
			}
		}
		if x.SignatureThreshold != nil {
			encoded, err := options.Marshal(x.SignatureThreshold)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x62
		}
		if x.NextAvailableNonce != nil {
			encoded, err := options.Marshal(x.NextAvailableNonce)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x5a
		}
		if x.MaxMessageBodySize != nil {
			encoded, err := options.Marshal(x.MaxMessageBodySize)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x52
		}
		if x.SendingAndReceivingMessagesPaused != nil {
			encoded, err := options.Marshal(x.SendingAndReceivingMessagesPaused)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x4a
		}
		if x.BurningAndMintingPaused != nil {
			encoded, err := options.Marshal(x.BurningAndMintingPaused)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.PerMessageBurnLimitList) > 0 {
			for iNdEx := len(x.PerMessageBurnLimitList) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PerMessageBurnLimitList[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x3a
			}
		}
		if len(x.AttesterList) > 0 {
			for iNdEx := len(x.AttesterList) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.AttesterList[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x32
			}
		}
		if len(x.TokenController) > 0 {
			i -= len(x.TokenController)
			copy(dAtA[i:], x.TokenController)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TokenController)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Pauser) > 0 {
			i -= len(x.Pauser)
			copy(dAtA[i:], x.Pauser)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Pauser)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.AttesterManager) > 0 {
			i -= len(x.AttesterManager)
			copy(dAtA[i:], x.AttesterManager)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AttesterManager)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Owner) > 0 {
			i -= len(x.Owner)
			copy(dAtA[i:], x.Owner)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Owner)))
			i--
			dAtA[i] = 0x12
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Owner = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AttesterManager", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AttesterManager = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pauser", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Pauser = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TokenController", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TokenController = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AttesterList", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AttesterList = append(x.AttesterList, &Attester{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AttesterList[len(x.AttesterList)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PerMessageBurnLimitList", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PerMessageBurnLimitList = append(x.PerMessageBurnLimitList, &PerMessageBurnLimit{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PerMessageBurnLimitList[len(x.PerMessageBurnLimitList)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BurningAndMintingPaused", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.BurningAndMintingPaused == nil {
					x.BurningAndMintingPaused = &BurningAndMintingPaused{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BurningAndMintingPaused); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SendingAndReceivingMessagesPaused", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.SendingAndReceivingMessagesPaused == nil {
					x.SendingAndReceivingMessagesPaused = &SendingAndReceivingMessagesPaused{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SendingAndReceivingMessagesPaused); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxMessageBodySize", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.MaxMessageBodySize == nil {
					x.MaxMessageBodySize = &MaxMessageBodySize{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MaxMessageBodySize); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NextAvailableNonce", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.NextAvailableNonce == nil {
					x.NextAvailableNonce = &Nonce{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.NextAvailableNonce); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SignatureThreshold", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.SignatureThreshold == nil {
					x.SignatureThreshold = &SignatureThreshold{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SignatureThreshold); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TokenPairList", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TokenPairList = append(x.TokenPairList, &TokenPair{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TokenPairList[len(x.TokenPairList)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UsedNoncesList", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.UsedNoncesList = append(x.UsedNoncesList, &Nonce{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.UsedNoncesList[len(x.UsedNoncesList)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TokenMessengerList", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TokenMessengerList = append(x.TokenMessengerList, &RemoteTokenMessenger{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TokenMessengerList[len(x.TokenMessengerList)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

//
// Copyright (c) 2023, © Circle Internet Financial, LTD.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: circle/cctp/v1/genesis.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GenesisState defines the cctp module's genesis state.
type GenesisState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner                             string                             `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	AttesterManager                   string                             `protobuf:"bytes,3,opt,name=attester_manager,json=attesterManager,proto3" json:"attester_manager,omitempty"`
	Pauser                            string                             `protobuf:"bytes,4,opt,name=pauser,proto3" json:"pauser,omitempty"`
	TokenController                   string                             `protobuf:"bytes,5,opt,name=token_controller,json=tokenController,proto3" json:"token_controller,omitempty"`
	AttesterList                      []*Attester                        `protobuf:"bytes,6,rep,name=attester_list,json=attesterList,proto3" json:"attester_list,omitempty"`
	PerMessageBurnLimitList           []*PerMessageBurnLimit             `protobuf:"bytes,7,rep,name=per_message_burn_limit_list,json=perMessageBurnLimitList,proto3" json:"per_message_burn_limit_list,omitempty"`
	BurningAndMintingPaused           *BurningAndMintingPaused           `protobuf:"bytes,8,opt,name=burning_and_minting_paused,json=burningAndMintingPaused,proto3" json:"burning_and_minting_paused,omitempty"`
	SendingAndReceivingMessagesPaused *SendingAndReceivingMessagesPaused `protobuf:"bytes,9,opt,name=sending_and_receiving_messages_paused,json=sendingAndReceivingMessagesPaused,proto3" json:"sending_and_receiving_messages_paused,omitempty"`
	MaxMessageBodySize                *MaxMessageBodySize                `protobuf:"bytes,10,opt,name=max_message_body_size,json=maxMessageBodySize,proto3" json:"max_message_body_size,omitempty"`
	NextAvailableNonce                *Nonce                             `protobuf:"bytes,11,opt,name=next_available_nonce,json=nextAvailableNonce,proto3" json:"next_available_nonce,omitempty"`
	SignatureThreshold                *SignatureThreshold                `protobuf:"bytes,12,opt,name=signature_threshold,json=signatureThreshold,proto3" json:"signature_threshold,omitempty"`
	TokenPairList                     []*TokenPair                       `protobuf:"bytes,13,rep,name=token_pair_list,json=tokenPairList,proto3" json:"token_pair_list,omitempty"`
	UsedNoncesList                    []*Nonce                           `protobuf:"bytes,14,rep,name=used_nonces_list,json=usedNoncesList,proto3" json:"used_nonces_list,omitempty"`
	TokenMessengerList                []*RemoteTokenMessenger            `protobuf:"bytes,15,rep,name=token_messenger_list,json=tokenMessengerList,proto3" json:"token_messenger_list,omitempty"`
}

func (x *GenesisState) Reset() {
	*x = GenesisState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circle_cctp_v1_genesis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisState) ProtoMessage() {}

// Deprecated: Use GenesisState.ProtoReflect.Descriptor instead.
func (*GenesisState) Descriptor() ([]byte, []int) {
	return file_circle_cctp_v1_genesis_proto_rawDescGZIP(), []int{0}
}

func (x *GenesisState) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *GenesisState) GetAttesterManager() string {
	if x != nil {
		return x.AttesterManager
	}
	return ""
}

func (x *GenesisState) GetPauser() string {
	if x != nil {
		return x.Pauser
	}
	return ""
}

func (x *GenesisState) GetTokenController() string {
	if x != nil {
		return x.TokenController
	}
	return ""
}

func (x *GenesisState) GetAttesterList() []*Attester {
	if x != nil {
		return x.AttesterList
	}
	return nil
}

func (x *GenesisState) GetPerMessageBurnLimitList() []*PerMessageBurnLimit {
	if x != nil {
		return x.PerMessageBurnLimitList
	}
	return nil
}

func (x *GenesisState) GetBurningAndMintingPaused() *BurningAndMintingPaused {
	if x != nil {
		return x.BurningAndMintingPaused
	}
	return nil
}

func (x *GenesisState) GetSendingAndReceivingMessagesPaused() *SendingAndReceivingMessagesPaused {
	if x != nil {
		return x.SendingAndReceivingMessagesPaused
	}
	return nil
}

func (x *GenesisState) GetMaxMessageBodySize() *MaxMessageBodySize {
	if x != nil {
		return x.MaxMessageBodySize
	}
	return nil
}

func (x *GenesisState) GetNextAvailableNonce() *Nonce {
	if x != nil {
		return x.NextAvailableNonce
	}
	return nil
}

func (x *GenesisState) GetSignatureThreshold() *SignatureThreshold {
	if x != nil {
		return x.SignatureThreshold
	}
	return nil
}

func (x *GenesisState) GetTokenPairList() []*TokenPair {
	if x != nil {
		return x.TokenPairList
	}
	return nil
}

func (x *GenesisState) GetUsedNoncesList() []*Nonce {
	if x != nil {
		return x.UsedNoncesList
	}
	return nil
}

func (x *GenesisState) GetTokenMessengerList() []*RemoteTokenMessenger {
	if x != nil {
		return x.TokenMessengerList
	}
	return nil
}

var File_circle_cctp_v1_genesis_proto protoreflect.FileDescriptor

var file_circle_cctp_v1_genesis_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2f, 0x63, 0x63, 0x74, 0x70, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e,
	0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x63, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x1a, 0x1d,
	0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2f, 0x63, 0x63, 0x74, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x63,
	0x69, 0x72, 0x63, 0x6c, 0x65, 0x2f, 0x63, 0x63, 0x74, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x75,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a,
	0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2f, 0x63, 0x63, 0x74, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x2f, 0x63, 0x63, 0x74, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2f, 0x63,
	0x63, 0x74, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2f, 0x63, 0x63, 0x74, 0x70,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x3a, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2f, 0x63, 0x63, 0x74, 0x70, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x63, 0x69,
	0x72, 0x63, 0x6c, 0x65, 0x2f, 0x63, 0x63, 0x74, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2f, 0x63,
	0x63, 0x74, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x69,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x08,
	0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x2e, 0x63, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x1b, 0x70, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x63, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x75, 0x72, 0x6e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x17, 0x70, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x75, 0x72, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x64, 0x0a, 0x1a, 0x62, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x6d, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x63, 0x63,
	0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64,
	0x4d, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x52, 0x17, 0x62,
	0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x83, 0x01, 0x0a, 0x25, 0x73, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e,
	0x63, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41,
	0x6e, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x52, 0x21, 0x73, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x55, 0x0a, 0x15,
	0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x69,
	0x72, 0x63, 0x6c, 0x65, 0x2e, 0x63, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x78,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x52,
	0x12, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x47, 0x0a, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x63, 0x63, 0x74, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x13,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x2e, 0x63, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x12, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x69, 0x72,
	0x63, 0x6c, 0x65, 0x2e, 0x63, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x50, 0x61, 0x69, 0x72, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0d, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x63, 0x63,
	0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x00, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x64, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x5c, 0x0a, 0x14, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x65,
	0x6e, 0x67, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x63, 0x63, 0x74, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x65, 0x6e, 0x67, 0x65, 0x72, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x12, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0xba, 0x01,
	0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x63, 0x63, 0x74,
	0x70, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x66, 0x69, 0x6e, 0x2f, 0x6e, 0x6f, 0x62, 0x6c, 0x65,
	0x2d, 0x63, 0x63, 0x74, 0x70, 0x2f, 0x70, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x2f, 0x63, 0x69, 0x72,
	0x63, 0x6c, 0x65, 0x2f, 0x63, 0x63, 0x74, 0x70, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x63, 0x74, 0x70,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x43, 0x58, 0xaa, 0x02, 0x0e, 0x43, 0x69, 0x72, 0x63, 0x6c,
	0x65, 0x2e, 0x43, 0x63, 0x74, 0x70, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0e, 0x43, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x5c, 0x43, 0x63, 0x74, 0x70, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1a, 0x43, 0x69, 0x72,
	0x63, 0x6c, 0x65, 0x5c, 0x43, 0x63, 0x74, 0x70, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65,
	0x3a, 0x3a, 0x43, 0x63, 0x74, 0x70, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_circle_cctp_v1_genesis_proto_rawDescOnce sync.Once
	file_circle_cctp_v1_genesis_proto_rawDescData = file_circle_cctp_v1_genesis_proto_rawDesc
)

func file_circle_cctp_v1_genesis_proto_rawDescGZIP() []byte {
	file_circle_cctp_v1_genesis_proto_rawDescOnce.Do(func() {
		file_circle_cctp_v1_genesis_proto_rawDescData = protoimpl.X.CompressGZIP(file_circle_cctp_v1_genesis_proto_rawDescData)
	})
	return file_circle_cctp_v1_genesis_proto_rawDescData
}

var file_circle_cctp_v1_genesis_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_circle_cctp_v1_genesis_proto_goTypes = []interface{}{
	(*GenesisState)(nil),                      // 0: circle.cctp.v1.GenesisState
	(*Attester)(nil),                          // 1: circle.cctp.v1.Attester
	(*PerMessageBurnLimit)(nil),               // 2: circle.cctp.v1.PerMessageBurnLimit
	(*BurningAndMintingPaused)(nil),           // 3: circle.cctp.v1.BurningAndMintingPaused
	(*SendingAndReceivingMessagesPaused)(nil), // 4: circle.cctp.v1.SendingAndReceivingMessagesPaused
	(*MaxMessageBodySize)(nil),                // 5: circle.cctp.v1.MaxMessageBodySize
	(*Nonce)(nil),                             // 6: circle.cctp.v1.Nonce
	(*SignatureThreshold)(nil),                // 7: circle.cctp.v1.SignatureThreshold
	(*TokenPair)(nil),                         // 8: circle.cctp.v1.TokenPair
	(*RemoteTokenMessenger)(nil),              // 9: circle.cctp.v1.RemoteTokenMessenger
}
var file_circle_cctp_v1_genesis_proto_depIdxs = []int32{
	1,  // 0: circle.cctp.v1.GenesisState.attester_list:type_name -> circle.cctp.v1.Attester
	2,  // 1: circle.cctp.v1.GenesisState.per_message_burn_limit_list:type_name -> circle.cctp.v1.PerMessageBurnLimit
	3,  // 2: circle.cctp.v1.GenesisState.burning_and_minting_paused:type_name -> circle.cctp.v1.BurningAndMintingPaused
	4,  // 3: circle.cctp.v1.GenesisState.sending_and_receiving_messages_paused:type_name -> circle.cctp.v1.SendingAndReceivingMessagesPaused
	5,  // 4: circle.cctp.v1.GenesisState.max_message_body_size:type_name -> circle.cctp.v1.MaxMessageBodySize
	6,  // 5: circle.cctp.v1.GenesisState.next_available_nonce:type_name -> circle.cctp.v1.Nonce
	7,  // 6: circle.cctp.v1.GenesisState.signature_threshold:type_name -> circle.cctp.v1.SignatureThreshold
	8,  // 7: circle.cctp.v1.GenesisState.token_pair_list:type_name -> circle.cctp.v1.TokenPair
	6,  // 8: circle.cctp.v1.GenesisState.used_nonces_list:type_name -> circle.cctp.v1.Nonce
	9,  // 9: circle.cctp.v1.GenesisState.token_messenger_list:type_name -> circle.cctp.v1.RemoteTokenMessenger
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_circle_cctp_v1_genesis_proto_init() }
func file_circle_cctp_v1_genesis_proto_init() {
	if File_circle_cctp_v1_genesis_proto != nil {
		return
	}
	file_circle_cctp_v1_attester_proto_init()
	file_circle_cctp_v1_burning_and_minting_paused_proto_init()
	file_circle_cctp_v1_max_message_body_size_proto_init()
	file_circle_cctp_v1_nonce_proto_init()
	file_circle_cctp_v1_per_message_burn_limit_proto_init()
	file_circle_cctp_v1_remote_token_messenger_proto_init()
	file_circle_cctp_v1_sending_and_receiving_messages_paused_proto_init()
	file_circle_cctp_v1_signature_threshold_proto_init()
	file_circle_cctp_v1_token_pair_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_circle_cctp_v1_genesis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_circle_cctp_v1_genesis_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_circle_cctp_v1_genesis_proto_goTypes,
		DependencyIndexes: file_circle_cctp_v1_genesis_proto_depIdxs,
		MessageInfos:      file_circle_cctp_v1_genesis_proto_msgTypes,
	}.Build()
	File_circle_cctp_v1_genesis_proto = out.File
	file_circle_cctp_v1_genesis_proto_rawDesc = nil
	file_circle_cctp_v1_genesis_proto_goTypes = nil
	file_circle_cctp_v1_genesis_proto_depIdxs = nil
}
