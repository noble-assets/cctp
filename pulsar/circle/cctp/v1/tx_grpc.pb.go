//
// Copyright (c) 2023, Â© Circle Internet Financial, LTD.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: circle/cctp/v1/tx.proto

package cctpv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_AcceptOwner_FullMethodName                        = "/circle.cctp.v1.Msg/AcceptOwner"
	Msg_AddRemoteTokenMessenger_FullMethodName            = "/circle.cctp.v1.Msg/AddRemoteTokenMessenger"
	Msg_DepositForBurn_FullMethodName                     = "/circle.cctp.v1.Msg/DepositForBurn"
	Msg_DepositForBurnWithCaller_FullMethodName           = "/circle.cctp.v1.Msg/DepositForBurnWithCaller"
	Msg_DisableAttester_FullMethodName                    = "/circle.cctp.v1.Msg/DisableAttester"
	Msg_EnableAttester_FullMethodName                     = "/circle.cctp.v1.Msg/EnableAttester"
	Msg_LinkTokenPair_FullMethodName                      = "/circle.cctp.v1.Msg/LinkTokenPair"
	Msg_PauseBurningAndMinting_FullMethodName             = "/circle.cctp.v1.Msg/PauseBurningAndMinting"
	Msg_PauseSendingAndReceivingMessages_FullMethodName   = "/circle.cctp.v1.Msg/PauseSendingAndReceivingMessages"
	Msg_ReceiveMessage_FullMethodName                     = "/circle.cctp.v1.Msg/ReceiveMessage"
	Msg_RemoveRemoteTokenMessenger_FullMethodName         = "/circle.cctp.v1.Msg/RemoveRemoteTokenMessenger"
	Msg_ReplaceDepositForBurn_FullMethodName              = "/circle.cctp.v1.Msg/ReplaceDepositForBurn"
	Msg_ReplaceMessage_FullMethodName                     = "/circle.cctp.v1.Msg/ReplaceMessage"
	Msg_SendMessage_FullMethodName                        = "/circle.cctp.v1.Msg/SendMessage"
	Msg_SendMessageWithCaller_FullMethodName              = "/circle.cctp.v1.Msg/SendMessageWithCaller"
	Msg_UnlinkTokenPair_FullMethodName                    = "/circle.cctp.v1.Msg/UnlinkTokenPair"
	Msg_UnpauseBurningAndMinting_FullMethodName           = "/circle.cctp.v1.Msg/UnpauseBurningAndMinting"
	Msg_UnpauseSendingAndReceivingMessages_FullMethodName = "/circle.cctp.v1.Msg/UnpauseSendingAndReceivingMessages"
	Msg_UpdateOwner_FullMethodName                        = "/circle.cctp.v1.Msg/UpdateOwner"
	Msg_UpdateAttesterManager_FullMethodName              = "/circle.cctp.v1.Msg/UpdateAttesterManager"
	Msg_UpdateTokenController_FullMethodName              = "/circle.cctp.v1.Msg/UpdateTokenController"
	Msg_UpdatePauser_FullMethodName                       = "/circle.cctp.v1.Msg/UpdatePauser"
	Msg_UpdateMaxMessageBodySize_FullMethodName           = "/circle.cctp.v1.Msg/UpdateMaxMessageBodySize"
	Msg_SetMaxBurnAmountPerMessage_FullMethodName         = "/circle.cctp.v1.Msg/SetMaxBurnAmountPerMessage"
	Msg_UpdateSignatureThreshold_FullMethodName           = "/circle.cctp.v1.Msg/UpdateSignatureThreshold"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	AcceptOwner(ctx context.Context, in *MsgAcceptOwner, opts ...grpc.CallOption) (*MsgAcceptOwnerResponse, error)
	AddRemoteTokenMessenger(ctx context.Context, in *MsgAddRemoteTokenMessenger, opts ...grpc.CallOption) (*MsgAddRemoteTokenMessengerResponse, error)
	DepositForBurn(ctx context.Context, in *MsgDepositForBurn, opts ...grpc.CallOption) (*MsgDepositForBurnResponse, error)
	DepositForBurnWithCaller(ctx context.Context, in *MsgDepositForBurnWithCaller, opts ...grpc.CallOption) (*MsgDepositForBurnWithCallerResponse, error)
	DisableAttester(ctx context.Context, in *MsgDisableAttester, opts ...grpc.CallOption) (*MsgDisableAttesterResponse, error)
	EnableAttester(ctx context.Context, in *MsgEnableAttester, opts ...grpc.CallOption) (*MsgEnableAttesterResponse, error)
	LinkTokenPair(ctx context.Context, in *MsgLinkTokenPair, opts ...grpc.CallOption) (*MsgLinkTokenPairResponse, error)
	PauseBurningAndMinting(ctx context.Context, in *MsgPauseBurningAndMinting, opts ...grpc.CallOption) (*MsgPauseBurningAndMintingResponse, error)
	PauseSendingAndReceivingMessages(ctx context.Context, in *MsgPauseSendingAndReceivingMessages, opts ...grpc.CallOption) (*MsgPauseSendingAndReceivingMessagesResponse, error)
	ReceiveMessage(ctx context.Context, in *MsgReceiveMessage, opts ...grpc.CallOption) (*MsgReceiveMessageResponse, error)
	RemoveRemoteTokenMessenger(ctx context.Context, in *MsgRemoveRemoteTokenMessenger, opts ...grpc.CallOption) (*MsgRemoveRemoteTokenMessengerResponse, error)
	ReplaceDepositForBurn(ctx context.Context, in *MsgReplaceDepositForBurn, opts ...grpc.CallOption) (*MsgReplaceDepositForBurnResponse, error)
	ReplaceMessage(ctx context.Context, in *MsgReplaceMessage, opts ...grpc.CallOption) (*MsgReplaceMessageResponse, error)
	SendMessage(ctx context.Context, in *MsgSendMessage, opts ...grpc.CallOption) (*MsgSendMessageResponse, error)
	SendMessageWithCaller(ctx context.Context, in *MsgSendMessageWithCaller, opts ...grpc.CallOption) (*MsgSendMessageWithCallerResponse, error)
	UnlinkTokenPair(ctx context.Context, in *MsgUnlinkTokenPair, opts ...grpc.CallOption) (*MsgUnlinkTokenPairResponse, error)
	UnpauseBurningAndMinting(ctx context.Context, in *MsgUnpauseBurningAndMinting, opts ...grpc.CallOption) (*MsgUnpauseBurningAndMintingResponse, error)
	UnpauseSendingAndReceivingMessages(ctx context.Context, in *MsgUnpauseSendingAndReceivingMessages, opts ...grpc.CallOption) (*MsgUnpauseSendingAndReceivingMessagesResponse, error)
	UpdateOwner(ctx context.Context, in *MsgUpdateOwner, opts ...grpc.CallOption) (*MsgUpdateOwnerResponse, error)
	UpdateAttesterManager(ctx context.Context, in *MsgUpdateAttesterManager, opts ...grpc.CallOption) (*MsgUpdateAttesterManagerResponse, error)
	UpdateTokenController(ctx context.Context, in *MsgUpdateTokenController, opts ...grpc.CallOption) (*MsgUpdateTokenControllerResponse, error)
	UpdatePauser(ctx context.Context, in *MsgUpdatePauser, opts ...grpc.CallOption) (*MsgUpdatePauserResponse, error)
	UpdateMaxMessageBodySize(ctx context.Context, in *MsgUpdateMaxMessageBodySize, opts ...grpc.CallOption) (*MsgUpdateMaxMessageBodySizeResponse, error)
	SetMaxBurnAmountPerMessage(ctx context.Context, in *MsgSetMaxBurnAmountPerMessage, opts ...grpc.CallOption) (*MsgSetMaxBurnAmountPerMessageResponse, error)
	UpdateSignatureThreshold(ctx context.Context, in *MsgUpdateSignatureThreshold, opts ...grpc.CallOption) (*MsgUpdateSignatureThresholdResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AcceptOwner(ctx context.Context, in *MsgAcceptOwner, opts ...grpc.CallOption) (*MsgAcceptOwnerResponse, error) {
	out := new(MsgAcceptOwnerResponse)
	err := c.cc.Invoke(ctx, Msg_AcceptOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddRemoteTokenMessenger(ctx context.Context, in *MsgAddRemoteTokenMessenger, opts ...grpc.CallOption) (*MsgAddRemoteTokenMessengerResponse, error) {
	out := new(MsgAddRemoteTokenMessengerResponse)
	err := c.cc.Invoke(ctx, Msg_AddRemoteTokenMessenger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DepositForBurn(ctx context.Context, in *MsgDepositForBurn, opts ...grpc.CallOption) (*MsgDepositForBurnResponse, error) {
	out := new(MsgDepositForBurnResponse)
	err := c.cc.Invoke(ctx, Msg_DepositForBurn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DepositForBurnWithCaller(ctx context.Context, in *MsgDepositForBurnWithCaller, opts ...grpc.CallOption) (*MsgDepositForBurnWithCallerResponse, error) {
	out := new(MsgDepositForBurnWithCallerResponse)
	err := c.cc.Invoke(ctx, Msg_DepositForBurnWithCaller_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DisableAttester(ctx context.Context, in *MsgDisableAttester, opts ...grpc.CallOption) (*MsgDisableAttesterResponse, error) {
	out := new(MsgDisableAttesterResponse)
	err := c.cc.Invoke(ctx, Msg_DisableAttester_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EnableAttester(ctx context.Context, in *MsgEnableAttester, opts ...grpc.CallOption) (*MsgEnableAttesterResponse, error) {
	out := new(MsgEnableAttesterResponse)
	err := c.cc.Invoke(ctx, Msg_EnableAttester_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LinkTokenPair(ctx context.Context, in *MsgLinkTokenPair, opts ...grpc.CallOption) (*MsgLinkTokenPairResponse, error) {
	out := new(MsgLinkTokenPairResponse)
	err := c.cc.Invoke(ctx, Msg_LinkTokenPair_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PauseBurningAndMinting(ctx context.Context, in *MsgPauseBurningAndMinting, opts ...grpc.CallOption) (*MsgPauseBurningAndMintingResponse, error) {
	out := new(MsgPauseBurningAndMintingResponse)
	err := c.cc.Invoke(ctx, Msg_PauseBurningAndMinting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PauseSendingAndReceivingMessages(ctx context.Context, in *MsgPauseSendingAndReceivingMessages, opts ...grpc.CallOption) (*MsgPauseSendingAndReceivingMessagesResponse, error) {
	out := new(MsgPauseSendingAndReceivingMessagesResponse)
	err := c.cc.Invoke(ctx, Msg_PauseSendingAndReceivingMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReceiveMessage(ctx context.Context, in *MsgReceiveMessage, opts ...grpc.CallOption) (*MsgReceiveMessageResponse, error) {
	out := new(MsgReceiveMessageResponse)
	err := c.cc.Invoke(ctx, Msg_ReceiveMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveRemoteTokenMessenger(ctx context.Context, in *MsgRemoveRemoteTokenMessenger, opts ...grpc.CallOption) (*MsgRemoveRemoteTokenMessengerResponse, error) {
	out := new(MsgRemoveRemoteTokenMessengerResponse)
	err := c.cc.Invoke(ctx, Msg_RemoveRemoteTokenMessenger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReplaceDepositForBurn(ctx context.Context, in *MsgReplaceDepositForBurn, opts ...grpc.CallOption) (*MsgReplaceDepositForBurnResponse, error) {
	out := new(MsgReplaceDepositForBurnResponse)
	err := c.cc.Invoke(ctx, Msg_ReplaceDepositForBurn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReplaceMessage(ctx context.Context, in *MsgReplaceMessage, opts ...grpc.CallOption) (*MsgReplaceMessageResponse, error) {
	out := new(MsgReplaceMessageResponse)
	err := c.cc.Invoke(ctx, Msg_ReplaceMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendMessage(ctx context.Context, in *MsgSendMessage, opts ...grpc.CallOption) (*MsgSendMessageResponse, error) {
	out := new(MsgSendMessageResponse)
	err := c.cc.Invoke(ctx, Msg_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendMessageWithCaller(ctx context.Context, in *MsgSendMessageWithCaller, opts ...grpc.CallOption) (*MsgSendMessageWithCallerResponse, error) {
	out := new(MsgSendMessageWithCallerResponse)
	err := c.cc.Invoke(ctx, Msg_SendMessageWithCaller_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnlinkTokenPair(ctx context.Context, in *MsgUnlinkTokenPair, opts ...grpc.CallOption) (*MsgUnlinkTokenPairResponse, error) {
	out := new(MsgUnlinkTokenPairResponse)
	err := c.cc.Invoke(ctx, Msg_UnlinkTokenPair_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnpauseBurningAndMinting(ctx context.Context, in *MsgUnpauseBurningAndMinting, opts ...grpc.CallOption) (*MsgUnpauseBurningAndMintingResponse, error) {
	out := new(MsgUnpauseBurningAndMintingResponse)
	err := c.cc.Invoke(ctx, Msg_UnpauseBurningAndMinting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnpauseSendingAndReceivingMessages(ctx context.Context, in *MsgUnpauseSendingAndReceivingMessages, opts ...grpc.CallOption) (*MsgUnpauseSendingAndReceivingMessagesResponse, error) {
	out := new(MsgUnpauseSendingAndReceivingMessagesResponse)
	err := c.cc.Invoke(ctx, Msg_UnpauseSendingAndReceivingMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateOwner(ctx context.Context, in *MsgUpdateOwner, opts ...grpc.CallOption) (*MsgUpdateOwnerResponse, error) {
	out := new(MsgUpdateOwnerResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAttesterManager(ctx context.Context, in *MsgUpdateAttesterManager, opts ...grpc.CallOption) (*MsgUpdateAttesterManagerResponse, error) {
	out := new(MsgUpdateAttesterManagerResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateAttesterManager_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateTokenController(ctx context.Context, in *MsgUpdateTokenController, opts ...grpc.CallOption) (*MsgUpdateTokenControllerResponse, error) {
	out := new(MsgUpdateTokenControllerResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateTokenController_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdatePauser(ctx context.Context, in *MsgUpdatePauser, opts ...grpc.CallOption) (*MsgUpdatePauserResponse, error) {
	out := new(MsgUpdatePauserResponse)
	err := c.cc.Invoke(ctx, Msg_UpdatePauser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMaxMessageBodySize(ctx context.Context, in *MsgUpdateMaxMessageBodySize, opts ...grpc.CallOption) (*MsgUpdateMaxMessageBodySizeResponse, error) {
	out := new(MsgUpdateMaxMessageBodySizeResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateMaxMessageBodySize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetMaxBurnAmountPerMessage(ctx context.Context, in *MsgSetMaxBurnAmountPerMessage, opts ...grpc.CallOption) (*MsgSetMaxBurnAmountPerMessageResponse, error) {
	out := new(MsgSetMaxBurnAmountPerMessageResponse)
	err := c.cc.Invoke(ctx, Msg_SetMaxBurnAmountPerMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSignatureThreshold(ctx context.Context, in *MsgUpdateSignatureThreshold, opts ...grpc.CallOption) (*MsgUpdateSignatureThresholdResponse, error) {
	out := new(MsgUpdateSignatureThresholdResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateSignatureThreshold_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	AcceptOwner(context.Context, *MsgAcceptOwner) (*MsgAcceptOwnerResponse, error)
	AddRemoteTokenMessenger(context.Context, *MsgAddRemoteTokenMessenger) (*MsgAddRemoteTokenMessengerResponse, error)
	DepositForBurn(context.Context, *MsgDepositForBurn) (*MsgDepositForBurnResponse, error)
	DepositForBurnWithCaller(context.Context, *MsgDepositForBurnWithCaller) (*MsgDepositForBurnWithCallerResponse, error)
	DisableAttester(context.Context, *MsgDisableAttester) (*MsgDisableAttesterResponse, error)
	EnableAttester(context.Context, *MsgEnableAttester) (*MsgEnableAttesterResponse, error)
	LinkTokenPair(context.Context, *MsgLinkTokenPair) (*MsgLinkTokenPairResponse, error)
	PauseBurningAndMinting(context.Context, *MsgPauseBurningAndMinting) (*MsgPauseBurningAndMintingResponse, error)
	PauseSendingAndReceivingMessages(context.Context, *MsgPauseSendingAndReceivingMessages) (*MsgPauseSendingAndReceivingMessagesResponse, error)
	ReceiveMessage(context.Context, *MsgReceiveMessage) (*MsgReceiveMessageResponse, error)
	RemoveRemoteTokenMessenger(context.Context, *MsgRemoveRemoteTokenMessenger) (*MsgRemoveRemoteTokenMessengerResponse, error)
	ReplaceDepositForBurn(context.Context, *MsgReplaceDepositForBurn) (*MsgReplaceDepositForBurnResponse, error)
	ReplaceMessage(context.Context, *MsgReplaceMessage) (*MsgReplaceMessageResponse, error)
	SendMessage(context.Context, *MsgSendMessage) (*MsgSendMessageResponse, error)
	SendMessageWithCaller(context.Context, *MsgSendMessageWithCaller) (*MsgSendMessageWithCallerResponse, error)
	UnlinkTokenPair(context.Context, *MsgUnlinkTokenPair) (*MsgUnlinkTokenPairResponse, error)
	UnpauseBurningAndMinting(context.Context, *MsgUnpauseBurningAndMinting) (*MsgUnpauseBurningAndMintingResponse, error)
	UnpauseSendingAndReceivingMessages(context.Context, *MsgUnpauseSendingAndReceivingMessages) (*MsgUnpauseSendingAndReceivingMessagesResponse, error)
	UpdateOwner(context.Context, *MsgUpdateOwner) (*MsgUpdateOwnerResponse, error)
	UpdateAttesterManager(context.Context, *MsgUpdateAttesterManager) (*MsgUpdateAttesterManagerResponse, error)
	UpdateTokenController(context.Context, *MsgUpdateTokenController) (*MsgUpdateTokenControllerResponse, error)
	UpdatePauser(context.Context, *MsgUpdatePauser) (*MsgUpdatePauserResponse, error)
	UpdateMaxMessageBodySize(context.Context, *MsgUpdateMaxMessageBodySize) (*MsgUpdateMaxMessageBodySizeResponse, error)
	SetMaxBurnAmountPerMessage(context.Context, *MsgSetMaxBurnAmountPerMessage) (*MsgSetMaxBurnAmountPerMessageResponse, error)
	UpdateSignatureThreshold(context.Context, *MsgUpdateSignatureThreshold) (*MsgUpdateSignatureThresholdResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) AcceptOwner(context.Context, *MsgAcceptOwner) (*MsgAcceptOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptOwner not implemented")
}
func (UnimplementedMsgServer) AddRemoteTokenMessenger(context.Context, *MsgAddRemoteTokenMessenger) (*MsgAddRemoteTokenMessengerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRemoteTokenMessenger not implemented")
}
func (UnimplementedMsgServer) DepositForBurn(context.Context, *MsgDepositForBurn) (*MsgDepositForBurnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositForBurn not implemented")
}
func (UnimplementedMsgServer) DepositForBurnWithCaller(context.Context, *MsgDepositForBurnWithCaller) (*MsgDepositForBurnWithCallerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositForBurnWithCaller not implemented")
}
func (UnimplementedMsgServer) DisableAttester(context.Context, *MsgDisableAttester) (*MsgDisableAttesterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableAttester not implemented")
}
func (UnimplementedMsgServer) EnableAttester(context.Context, *MsgEnableAttester) (*MsgEnableAttesterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableAttester not implemented")
}
func (UnimplementedMsgServer) LinkTokenPair(context.Context, *MsgLinkTokenPair) (*MsgLinkTokenPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkTokenPair not implemented")
}
func (UnimplementedMsgServer) PauseBurningAndMinting(context.Context, *MsgPauseBurningAndMinting) (*MsgPauseBurningAndMintingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseBurningAndMinting not implemented")
}
func (UnimplementedMsgServer) PauseSendingAndReceivingMessages(context.Context, *MsgPauseSendingAndReceivingMessages) (*MsgPauseSendingAndReceivingMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseSendingAndReceivingMessages not implemented")
}
func (UnimplementedMsgServer) ReceiveMessage(context.Context, *MsgReceiveMessage) (*MsgReceiveMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveMessage not implemented")
}
func (UnimplementedMsgServer) RemoveRemoteTokenMessenger(context.Context, *MsgRemoveRemoteTokenMessenger) (*MsgRemoveRemoteTokenMessengerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRemoteTokenMessenger not implemented")
}
func (UnimplementedMsgServer) ReplaceDepositForBurn(context.Context, *MsgReplaceDepositForBurn) (*MsgReplaceDepositForBurnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceDepositForBurn not implemented")
}
func (UnimplementedMsgServer) ReplaceMessage(context.Context, *MsgReplaceMessage) (*MsgReplaceMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceMessage not implemented")
}
func (UnimplementedMsgServer) SendMessage(context.Context, *MsgSendMessage) (*MsgSendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMsgServer) SendMessageWithCaller(context.Context, *MsgSendMessageWithCaller) (*MsgSendMessageWithCallerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessageWithCaller not implemented")
}
func (UnimplementedMsgServer) UnlinkTokenPair(context.Context, *MsgUnlinkTokenPair) (*MsgUnlinkTokenPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkTokenPair not implemented")
}
func (UnimplementedMsgServer) UnpauseBurningAndMinting(context.Context, *MsgUnpauseBurningAndMinting) (*MsgUnpauseBurningAndMintingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpauseBurningAndMinting not implemented")
}
func (UnimplementedMsgServer) UnpauseSendingAndReceivingMessages(context.Context, *MsgUnpauseSendingAndReceivingMessages) (*MsgUnpauseSendingAndReceivingMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpauseSendingAndReceivingMessages not implemented")
}
func (UnimplementedMsgServer) UpdateOwner(context.Context, *MsgUpdateOwner) (*MsgUpdateOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwner not implemented")
}
func (UnimplementedMsgServer) UpdateAttesterManager(context.Context, *MsgUpdateAttesterManager) (*MsgUpdateAttesterManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttesterManager not implemented")
}
func (UnimplementedMsgServer) UpdateTokenController(context.Context, *MsgUpdateTokenController) (*MsgUpdateTokenControllerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTokenController not implemented")
}
func (UnimplementedMsgServer) UpdatePauser(context.Context, *MsgUpdatePauser) (*MsgUpdatePauserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePauser not implemented")
}
func (UnimplementedMsgServer) UpdateMaxMessageBodySize(context.Context, *MsgUpdateMaxMessageBodySize) (*MsgUpdateMaxMessageBodySizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMaxMessageBodySize not implemented")
}
func (UnimplementedMsgServer) SetMaxBurnAmountPerMessage(context.Context, *MsgSetMaxBurnAmountPerMessage) (*MsgSetMaxBurnAmountPerMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMaxBurnAmountPerMessage not implemented")
}
func (UnimplementedMsgServer) UpdateSignatureThreshold(context.Context, *MsgUpdateSignatureThreshold) (*MsgUpdateSignatureThresholdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSignatureThreshold not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_AcceptOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAcceptOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AcceptOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AcceptOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AcceptOwner(ctx, req.(*MsgAcceptOwner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddRemoteTokenMessenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddRemoteTokenMessenger)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddRemoteTokenMessenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddRemoteTokenMessenger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddRemoteTokenMessenger(ctx, req.(*MsgAddRemoteTokenMessenger))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DepositForBurn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDepositForBurn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DepositForBurn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DepositForBurn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DepositForBurn(ctx, req.(*MsgDepositForBurn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DepositForBurnWithCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDepositForBurnWithCaller)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DepositForBurnWithCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DepositForBurnWithCaller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DepositForBurnWithCaller(ctx, req.(*MsgDepositForBurnWithCaller))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DisableAttester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDisableAttester)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DisableAttester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DisableAttester_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DisableAttester(ctx, req.(*MsgDisableAttester))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EnableAttester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEnableAttester)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EnableAttester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_EnableAttester_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EnableAttester(ctx, req.(*MsgEnableAttester))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LinkTokenPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLinkTokenPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LinkTokenPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_LinkTokenPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LinkTokenPair(ctx, req.(*MsgLinkTokenPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PauseBurningAndMinting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPauseBurningAndMinting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PauseBurningAndMinting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PauseBurningAndMinting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PauseBurningAndMinting(ctx, req.(*MsgPauseBurningAndMinting))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PauseSendingAndReceivingMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPauseSendingAndReceivingMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PauseSendingAndReceivingMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PauseSendingAndReceivingMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PauseSendingAndReceivingMessages(ctx, req.(*MsgPauseSendingAndReceivingMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReceiveMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReceiveMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReceiveMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ReceiveMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReceiveMessage(ctx, req.(*MsgReceiveMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveRemoteTokenMessenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveRemoteTokenMessenger)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveRemoteTokenMessenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RemoveRemoteTokenMessenger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveRemoteTokenMessenger(ctx, req.(*MsgRemoveRemoteTokenMessenger))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReplaceDepositForBurn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReplaceDepositForBurn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReplaceDepositForBurn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ReplaceDepositForBurn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReplaceDepositForBurn(ctx, req.(*MsgReplaceDepositForBurn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReplaceMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReplaceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReplaceMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ReplaceMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReplaceMessage(ctx, req.(*MsgReplaceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendMessage(ctx, req.(*MsgSendMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendMessageWithCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendMessageWithCaller)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendMessageWithCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SendMessageWithCaller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendMessageWithCaller(ctx, req.(*MsgSendMessageWithCaller))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnlinkTokenPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnlinkTokenPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnlinkTokenPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UnlinkTokenPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnlinkTokenPair(ctx, req.(*MsgUnlinkTokenPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnpauseBurningAndMinting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnpauseBurningAndMinting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnpauseBurningAndMinting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UnpauseBurningAndMinting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnpauseBurningAndMinting(ctx, req.(*MsgUnpauseBurningAndMinting))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnpauseSendingAndReceivingMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnpauseSendingAndReceivingMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnpauseSendingAndReceivingMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UnpauseSendingAndReceivingMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnpauseSendingAndReceivingMessages(ctx, req.(*MsgUnpauseSendingAndReceivingMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateOwner(ctx, req.(*MsgUpdateOwner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAttesterManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAttesterManager)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAttesterManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateAttesterManager_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAttesterManager(ctx, req.(*MsgUpdateAttesterManager))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateTokenController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateTokenController)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateTokenController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateTokenController_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateTokenController(ctx, req.(*MsgUpdateTokenController))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdatePauser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdatePauser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdatePauser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdatePauser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdatePauser(ctx, req.(*MsgUpdatePauser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMaxMessageBodySize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMaxMessageBodySize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMaxMessageBodySize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateMaxMessageBodySize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMaxMessageBodySize(ctx, req.(*MsgUpdateMaxMessageBodySize))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetMaxBurnAmountPerMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetMaxBurnAmountPerMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetMaxBurnAmountPerMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetMaxBurnAmountPerMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetMaxBurnAmountPerMessage(ctx, req.(*MsgSetMaxBurnAmountPerMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSignatureThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSignatureThreshold)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSignatureThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateSignatureThreshold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSignatureThreshold(ctx, req.(*MsgUpdateSignatureThreshold))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "circle.cctp.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcceptOwner",
			Handler:    _Msg_AcceptOwner_Handler,
		},
		{
			MethodName: "AddRemoteTokenMessenger",
			Handler:    _Msg_AddRemoteTokenMessenger_Handler,
		},
		{
			MethodName: "DepositForBurn",
			Handler:    _Msg_DepositForBurn_Handler,
		},
		{
			MethodName: "DepositForBurnWithCaller",
			Handler:    _Msg_DepositForBurnWithCaller_Handler,
		},
		{
			MethodName: "DisableAttester",
			Handler:    _Msg_DisableAttester_Handler,
		},
		{
			MethodName: "EnableAttester",
			Handler:    _Msg_EnableAttester_Handler,
		},
		{
			MethodName: "LinkTokenPair",
			Handler:    _Msg_LinkTokenPair_Handler,
		},
		{
			MethodName: "PauseBurningAndMinting",
			Handler:    _Msg_PauseBurningAndMinting_Handler,
		},
		{
			MethodName: "PauseSendingAndReceivingMessages",
			Handler:    _Msg_PauseSendingAndReceivingMessages_Handler,
		},
		{
			MethodName: "ReceiveMessage",
			Handler:    _Msg_ReceiveMessage_Handler,
		},
		{
			MethodName: "RemoveRemoteTokenMessenger",
			Handler:    _Msg_RemoveRemoteTokenMessenger_Handler,
		},
		{
			MethodName: "ReplaceDepositForBurn",
			Handler:    _Msg_ReplaceDepositForBurn_Handler,
		},
		{
			MethodName: "ReplaceMessage",
			Handler:    _Msg_ReplaceMessage_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Msg_SendMessage_Handler,
		},
		{
			MethodName: "SendMessageWithCaller",
			Handler:    _Msg_SendMessageWithCaller_Handler,
		},
		{
			MethodName: "UnlinkTokenPair",
			Handler:    _Msg_UnlinkTokenPair_Handler,
		},
		{
			MethodName: "UnpauseBurningAndMinting",
			Handler:    _Msg_UnpauseBurningAndMinting_Handler,
		},
		{
			MethodName: "UnpauseSendingAndReceivingMessages",
			Handler:    _Msg_UnpauseSendingAndReceivingMessages_Handler,
		},
		{
			MethodName: "UpdateOwner",
			Handler:    _Msg_UpdateOwner_Handler,
		},
		{
			MethodName: "UpdateAttesterManager",
			Handler:    _Msg_UpdateAttesterManager_Handler,
		},
		{
			MethodName: "UpdateTokenController",
			Handler:    _Msg_UpdateTokenController_Handler,
		},
		{
			MethodName: "UpdatePauser",
			Handler:    _Msg_UpdatePauser_Handler,
		},
		{
			MethodName: "UpdateMaxMessageBodySize",
			Handler:    _Msg_UpdateMaxMessageBodySize_Handler,
		},
		{
			MethodName: "SetMaxBurnAmountPerMessage",
			Handler:    _Msg_SetMaxBurnAmountPerMessage_Handler,
		},
		{
			MethodName: "UpdateSignatureThreshold",
			Handler:    _Msg_UpdateSignatureThreshold_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "circle/cctp/v1/tx.proto",
}
